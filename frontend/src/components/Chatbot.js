import React, { useState, useRef, useEffect } from 'react';
import './Chatbot.css';

const Chatbot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: 'bot',
      content: 'ÏïàÎÖïÌïòÏÑ∏Ïöî! Ïä¨Ïä¨ AIdea Agent Ï±óÎ¥áÏûÖÎãàÎã§. Î¨¥ÏóáÏùÑ ÎèÑÏôÄÎìúÎ¶¥ÍπåÏöî?',
      timestamp: new Date()
    }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // ÏûêÎèô ÏùëÎãµ Î°úÏßÅ
  const getBotResponse = (userMessage) => {
    const lowerMessage = userMessage.toLowerCase();
    
    if (lowerMessage.includes('ÏùºÏ†ï') || lowerMessage.includes('Ïä§ÏºÄÏ§Ñ')) {
      return 'Ïª®ÌçºÎü∞Ïä§Îäî 12Ïõî 15Ïùº-16Ïùº Ïù¥ÌãÄÍ∞Ñ ÏßÑÌñâÎê©ÎãàÎã§. ÏÉÅÏÑ∏ ÏùºÏ†ïÏùÄ ÏùºÏ†ï ÌéòÏù¥ÏßÄÏóêÏÑú ÌôïÏù∏ÌïòÏã§ Ïàò ÏûàÏñ¥Ïöî!';
    } else if (lowerMessage.includes('Îì±Î°ù') || lowerMessage.includes('Ï∞∏Í∞Ä')) {
      return 'Ïª®ÌçºÎü∞Ïä§ Îì±Î°ùÏùÄ Îì±Î°ù ÌéòÏù¥ÏßÄÏóêÏÑú Í∞ÄÎä•Ìï©ÎãàÎã§. Î¨¥Î£åÎ°ú Ï∞∏Í∞ÄÌïòÏã§ Ïàò ÏûàÏñ¥Ïöî!';
    } else if (lowerMessage.includes('Î∞úÌëúÏûê') || lowerMessage.includes('Ïä§ÌîºÏª§')) {
      return 'Í∞Å Î∂ÑÏïºÏùò Ï†ÑÎ¨∏Í∞ÄÎì§Ïù¥ Î∞úÌëúÌï©ÎãàÎã§. AI, ÌÅ¥ÎùºÏö∞Îìú, DevOps, ÌîÑÎ°†Ìä∏ÏóîÎìú Îì± Îã§ÏñëÌïú Ìä∏ÎûôÏù¥ ÏûàÏñ¥Ïöî!';
    } else if (lowerMessage.includes('ÏúÑÏπò') || lowerMessage.includes('Ïû•ÏÜå')) {
      return 'Ïª®ÌçºÎü∞Ïä§Îäî Ïò®ÎùºÏù∏ÏúºÎ°ú ÏßÑÌñâÎê©ÎãàÎã§. ÏßëÏóêÏÑú Ìé∏ÏïàÌïòÍ≤å Ï∞∏Ïó¨ÌïòÏã§ Ïàò ÏûàÏñ¥Ïöî!';
    } else if (lowerMessage.includes('ÎπÑÏö©') || lowerMessage.includes('Í∞ÄÍ≤©')) {
      return 'Ïª®ÌçºÎü∞Ïä§ Ï∞∏Í∞ÄÎäî ÏôÑÏ†Ñ Î¨¥Î£åÏûÖÎãàÎã§! ÏÇ¨ÎÇ¥ Í∞úÎ∞úÏûêÎ∂ÑÎì§ÏùÑ ÏúÑÌïú ÌäπÎ≥ÑÌïú ÌòúÌÉùÏù¥ÏóêÏöî.';
    } else if (lowerMessage.includes('Í∏∞Ïà†') || lowerMessage.includes('Ìä∏Îûô')) {
      return 'AI/ML, ÌÅ¥ÎùºÏö∞Îìú, DevOps, ÌîÑÎ°†Ìä∏ÏóîÎìú, Îç∞Ïù¥ÌÑ∞, Î≥¥Ïïà Îì± Îã§ÏñëÌïú Í∏∞Ïà† Ìä∏ÎûôÏùÑ Ï§ÄÎπÑÌñàÏäµÎãàÎã§!';
    } else if (lowerMessage.includes('ÎÑ§Ìä∏ÏõåÌÇπ') || lowerMessage.includes('ÏÜåÌÜµ')) {
      return 'Ïª®ÌçºÎü∞Ïä§ Ï§ë ÎÑ§Ìä∏ÏõåÌÇπ ÏÑ∏ÏÖòÍ≥º Ï±ÑÌåÖÏùÑ ÌÜµÌï¥ Îã§Î•∏ Í∞úÎ∞úÏûêÎì§Í≥º ÏÜåÌÜµÌï† Ïàò ÏûàÏñ¥Ïöî!';
    } else if (lowerMessage.includes('ÏÉÅÍ∏à') || lowerMessage.includes('Í≤ΩÏßÑÎåÄÌöå')) {
      return 'ÌîÑÎ°úÏ†ùÌä∏ Í≤ΩÏßÑÎåÄÌöåÏóêÏÑú Ïö∞ÏàòÌïú ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÑ†Ï†ïÌïòÏó¨ ÏÉÅÍ∏àÏùÑ ÏàòÏó¨Ìï©ÎãàÎã§!';
    } else if (lowerMessage.includes('ÎèÑÏõÄ') || lowerMessage.includes('help')) {
      return 'ÏùºÏ†ï, Îì±Î°ù, Î∞úÌëúÏûê, ÏúÑÏπò, ÎπÑÏö©, Í∏∞Ïà† Ìä∏Îûô, ÎÑ§Ìä∏ÏõåÌÇπ, Í≤ΩÏßÑÎåÄÌöå Îì±Ïóê ÎåÄÌï¥ ÏßàÎ¨∏Ìï¥Ï£ºÏÑ∏Ïöî!';
    } else {
      return 'Ï£ÑÏÜ°Ìï©ÎãàÎã§. ÏßàÎ¨∏ÏùÑ Ïù¥Ìï¥ÌïòÏßÄ Î™ªÌñàÏñ¥Ïöî. Îã§Î•∏ Î∞©ÏãùÏúºÎ°ú ÏßàÎ¨∏Ìï¥Ï£ºÏãúÍ±∞ÎÇò, "ÎèÑÏõÄ"Ïù¥ÎùºÍ≥† ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!';
    }
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage = {
      id: Date.now(),
      type: 'user',
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsTyping(true);

    // Ï±óÎ¥á ÏùëÎãµ ÏãúÎÆ¨Î†àÏù¥ÏÖò
    setTimeout(() => {
      const botResponse = {
        id: Date.now() + 1,
        type: 'bot',
        content: getBotResponse(inputMessage),
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, botResponse]);
      setIsTyping(false);
    }, 1000);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const toggleChatbot = () => {
    setIsOpen(!isOpen);
    if (!isOpen) {
      setTimeout(() => {
        inputRef.current?.focus();
      }, 300);
    }
  };

  const formatTime = (date) => {
    return date.toLocaleTimeString('ko-KR', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  return (
    <>
      {/* Ï±óÎ¥á ÌÜ†Í∏Ä Î≤ÑÌäº */}
      <button 
        className={`chatbot-toggle ${isOpen ? 'open' : ''}`}
        onClick={toggleChatbot}
        aria-label="Ï±óÎ¥á Ïó¥Í∏∞/Îã´Í∏∞"
      >
        {isOpen ? (
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        ) : (
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
            <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
          </svg>
        )}
      </button>

      {/* Ï±óÎ¥á Ìå®ÎÑê */}
      <div className={`chatbot-panel ${isOpen ? 'open' : ''}`}>
        <div className="chatbot-header">
          <div className="chatbot-avatar">
            <div className="avatar-icon">ü§ñ</div>
          </div>
          <div className="chatbot-info">
            <h3>Ïä¨Ïä¨ AIdea Agent</h3>
            <span className="status">Ïò®ÎùºÏù∏</span>
          </div>
        </div>

        <div className="chatbot-messages">
          {messages.map((message) => (
            <div key={message.id} className={`message ${message.type}`}>
              <div className="message-content">
                {message.content}
              </div>
              <div className="message-time">
                {formatTime(message.timestamp)}
              </div>
            </div>
          ))}
          
          {isTyping && (
            <div className="message bot typing">
              <div className="message-content">
                <div className="typing-indicator">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        <div className="chatbot-input">
          <div className="input-container">
            <input
              ref={inputRef}
              type="text"
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
              disabled={isTyping}
            />
            <button 
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isTyping}
              className="send-button"
            >
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                <path d="M22 2L11 13M22 2L15 22L11 13M11 13L2 9L22 2" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
              </svg>
            </button>
          </div>
          <div className="quick-questions">
            <button onClick={() => setInputMessage('ÏùºÏ†ïÏù¥ Í∂ÅÍ∏àÌï¥Ïöî')}>
              ÏùºÏ†ï
            </button>
            <button onClick={() => setInputMessage('Îì±Î°ù Î∞©Î≤ï')}>
              Îì±Î°ù
            </button>
            <button onClick={() => setInputMessage('Î∞úÌëúÏûê')}>
              Î∞úÌëúÏûê
            </button>
          </div>
        </div>
      </div>
    </>
  );
};

export default Chatbot; 